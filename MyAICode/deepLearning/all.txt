iothreads_t iothreads_start( uint8_t nthreads, 
					void (*method)(void *, uint8_t, int16_t, void *), void * context )
{
	uint8_t i = 0;
	struct iothreads * iothreads = NULL;

	iothreads = calloc( 1, sizeof(struct iothreads) );
	if ( iothreads == NULL )
	{
		return NULL;
	}
	
	iothreads->threadgroup = calloc( nthreads, sizeof(struct iothread) );
	if ( iothreads->threadgroup == NULL )
	{
		free( iothreads );
		iothreads = NULL;
	}

	iothreads->method 	= method;
	iothreads->context	= context;
	iothreads->nthreads = nthreads;
	pthread_cond_init( &iothreads->cond, NULL );
	pthread_mutex_init( &iothreads->lock, NULL );

	// ���������߳�
	iothreads->runflags = 1;
	iothreads->nrunthreads = nthreads;
	for ( i = 0; i < nthreads; ++i )
	{
		iothread_start( iothreads->threadgroup+i, i, iothreads );
	}

	return iothreads;
}

void Demo_33()
{
	int* p = (int*)malloc(sizeof(int));
	int b = *p + 1;
}

iothreads_t iothreads_start( uint8_t nthreads, 
					void (*method)(void *, uint8_t, int16_t, void *), void * context )
{
	uint8_t i = 0;
	struct iothreads * iothreads = NULL;

	iothreads = calloc( 1, sizeof(struct iothreads) );
	if ( iothreads == NULL )
	{
		return NULL;
	}
	
	iothreads->threadgroup = calloc( nthreads, sizeof(struct iothread) );
	if ( iothreads->threadgroup == NULL )
	{
		free( iothreads );
		iothreads = NULL;
	}

	iothreads->method 	= method;
	iothreads->context	= context;
	iothreads->nthreads = nthreads;
	pthread_cond_init( &iothreads->cond, NULL );
	pthread_mutex_init( &iothreads->lock, NULL );

	// ���������߳�
	iothreads->runflags = 1;
	iothreads->nrunthreads = nthreads;
	for ( i = 0; i < nthreads; ++i )
	{
		iothread_start( iothreads->threadgroup+i, i, iothreads );
	}

	return iothreads;
}

	int* a = (int*)malloc(sizeof(int));

    pairs = realloc( self->evpairs, npairs*sizeof(struct eventpair) );

void * iothread_main( void * arg )
{
	struct iothread * thread = (struct iothread *)arg;
	struct iothreads * parent = (struct iothreads *)(thread->parent);

	int32_t i = 0;
	int32_t ntasks = 0;
	struct task tasks[ POP_TASKS_COUNT ];

	while ( parent->runflags )
	{
		// ��ѯ�����¼�
		evsets_dispatch( thread->sets );

		// ��������
		do
		{
			ntasks = msgqueue_pops( thread->queue, tasks, POP_TASKS_COUNT );
			for ( i = 0; i < ntasks; ++i )
			{
				void * data = NULL;

				switch ( tasks[i].type )
				{
				case eTaskType_Null :
					{
						// ������
						continue;
					}
					break;

				case eTaskType_User :
					{
						// �û�����
						data = tasks[i].task;
					}
					break;

				case eTaskType_Data :
					{
						// ��������
						data = (void *)(tasks[i].data);
					}
					break;
				}

				// �ص�
				parent->method( parent->context, thread->index, tasks[i].utype, data );
			}
		}
		while ( ntasks == POP_TASKS_COUNT );
	}

	// �����̷߳�����ֹ�ź�
	pthread_mutex_lock( &parent->lock );
	--parent->nrunthreads;
	pthread_cond_signal( &parent->cond );
	pthread_mutex_unlock( &parent->lock );
	

	FILE *pFile = fopen("c:\\test.txt", "w+");
	if (pFile != NULL)
	{
		// û��close�ļ����˳���
		printf("forget to release pFile!");
		return;
	}


	return NULL;
}

	pthread_mutex_lock( &iothreads->lock );

void Demo_31()
{
	char buf[5];


	free(buf);
}

void Demo_33()
{
	int* p = (int*)malloc(sizeof(int));
	int b = *p + 1;
}

void * iothread_main( void * arg )
{
	struct iothread * thread = (struct iothread *)arg;
	struct iothreads * parent = (struct iothreads *)(thread->parent);

	int32_t i = 0;
	int32_t ntasks = 0;
	struct task tasks[ POP_TASKS_COUNT ];

	while ( parent->runflags )
	{
		// ��ѯ�����¼�
		evsets_dispatch( thread->sets );

		// ��������
		do
		{
			ntasks = msgqueue_pops( thread->queue, tasks, POP_TASKS_COUNT );
			for ( i = 0; i < ntasks; ++i )
			{
				void * data = NULL;

				switch ( tasks[i].type )
				{
				case eTaskType_Null :
					{
						// ������
						continue;
					}
					break;

				case eTaskType_User :
					{
						// �û�����
						data = tasks[i].task;
					}
					break;

				case eTaskType_Data :
					{
						// ��������
						data = (void *)(tasks[i].data);
					}
					break;
				}

				// �ص�
				parent->method( parent->context, thread->index, tasks[i].utype, data );
			}
		}
		while ( ntasks == POP_TASKS_COUNT );
	}

	// �����̷߳�����ֹ�ź�
	pthread_mutex_lock( &parent->lock );
	--parent->nrunthreads;
	pthread_cond_signal( &parent->cond );
	pthread_mutex_unlock( &parent->lock );
	

	FILE *pFile = fopen("c:\\test.txt", "w+");
	if (pFile != NULL)
	{
		// û��close�ļ����˳���
		printf("forget to release pFile!");
		return;
	}


	return NULL;
}

		addr.sin_addr.s_addr = inet_addr( host );
	}
	else
	{
		addr.sin_addr.s_addr = INADDR_ANY;
	}

	if ( bind( fd, (struct sockaddr *)&addr, sizeof(addr) ) == -1 )
	{
		close( fd );
		return -2;
	}

	if ( listen( fd, 8192 ) == -1 )
	{
		close( fd );
		return -3;
	}

void iothreads_stop( iothreads_t self )
{
	uint8_t i = 0;
	struct iothreads * iothreads = (struct iothreads *)(self);

	// �������̷߳���ֹͣ����
	iothreads->runflags = 0;
	for ( i = 0; i < iothreads->nthreads; ++i )
	{
		iothread_post( iothreads->threadgroup+i, eTaskType_Null, 0, NULL, 0 );
	}

	// �ȴ��߳��˳�
	pthread_mutex_lock( &iothreads->lock );
	while ( iothreads->nrunthreads > 0 )
	{
		pthread_cond_wait( &iothreads->cond, &iothreads->lock );
	}
	pthread_mutex_unlock( &iothreads->lock );

	// �������������߳�
	for ( i = 0; i < iothreads->nthreads; ++i )
	{
		iothread_stop( iothreads->threadgroup + i );
	}
	
	pthread_cond_destroy( &iothreads->cond );
	pthread_mutex_destroy( &iothreads->lock );
	if ( iothreads->threadgroup )
	{
		free( iothreads->threadgroup );
		iothreads->threadgroup = NULL;
	}

	free ( iothreads );

	return;
}

void Demo_29()
{
	int* a = (int*)malloc(sizeof(int));
	free(a);



	free(a);//aָ����ڴ�ռ��ֱ��ͷ���һ��

	a = NULL;
}

void Demo_33()
{
	int* p = (int*)malloc(sizeof(int));
	int b = *p + 1;
}

int32_t arraylist_append( struct arraylist * self, void * data )
{
    if ( self->count >= self->size )
    {
        self->size <<= 1;
        self->entries = (void **)realloc( self->entries, sizeof(void *)*self->size );

        assert( self->entries != NULL );
        memset( self->entries+self->count, 0, (self->size-self->count)*sizeof(void *) );
    }

    self->entries[self->count++] = data;

    return 0;
}

iothreads_t iothreads_start( uint8_t nthreads, 
					void (*method)(void *, uint8_t, int16_t, void *), void * context )
{
	uint8_t i = 0;
	struct iothreads * iothreads = NULL;

	iothreads = calloc( 1, sizeof(struct iothreads) );
	if ( iothreads == NULL )
	{
		return NULL;
	}
	
	iothreads->threadgroup = calloc( nthreads, sizeof(struct iothread) );
	if ( iothreads->threadgroup == NULL )
	{
		free( iothreads );
		iothreads = NULL;
	}

	iothreads->method 	= method;
	iothreads->context	= context;
	iothreads->nthreads = nthreads;
	pthread_cond_init( &iothreads->cond, NULL );
	pthread_mutex_init( &iothreads->lock, NULL );

	// ���������߳�
	iothreads->runflags = 1;
	iothreads->nrunthreads = nthreads;
	for ( i = 0; i < nthreads; ++i )
	{
		iothread_start( iothreads->threadgroup+i, i, iothreads );
	}

	return iothreads;
}

void * iothread_main( void * arg )
{
	struct iothread * thread = (struct iothread *)arg;
	struct iothreads * parent = (struct iothreads *)(thread->parent);

	int32_t i = 0;
	int32_t ntasks = 0;
	struct task tasks[ POP_TASKS_COUNT ];

	while ( parent->runflags )
	{
		// ��ѯ�����¼�
		evsets_dispatch( thread->sets );

		// ��������
		do
		{
			ntasks = msgqueue_pops( thread->queue, tasks, POP_TASKS_COUNT );
			for ( i = 0; i < ntasks; ++i )
			{
				void * data = NULL;

				switch ( tasks[i].type )
				{
				case eTaskType_Null :
					{
						// ������
						continue;
					}
					break;

				case eTaskType_User :
					{
						// �û�����
						data = tasks[i].task;
					}
					break;

				case eTaskType_Data :
					{
						// ��������
						data = (void *)(tasks[i].data);
					}
					break;
				}

				// �ص�
				parent->method( parent->context, thread->index, tasks[i].utype, data );
			}
		}
		while ( ntasks == POP_TASKS_COUNT );
	}

	// �����̷߳�����ֹ�ź�
	pthread_mutex_lock( &parent->lock );
	--parent->nrunthreads;
	pthread_cond_signal( &parent->cond );
	pthread_mutex_unlock( &parent->lock );
	

	FILE *pFile = fopen("c:\\test.txt", "w+");
	if (pFile != NULL)
	{
		// û��close�ļ����˳���
		printf("forget to release pFile!");
		return;
	}


	return NULL;
}

int32_t _broadcast_direct( struct session_manager * manager, struct message * msg )
{
	uint32_t i = 0;
	int32_t rc = 0;

	for ( i = 0; i < sidlist_count(msg->tolist); ++i )
	{
		sid_t id = sidlist_get(msg->tolist, i);
		struct session * session = session_manager_get( manager, id );

		if ( session == NULL )
		{
			// �Ự�Ƿ�
			message_add_failure( msg, id );
			continue;
		}

		// ֱ����ӵ��Ự�ķ����б���
		if ( session_append(session, msg) != 0 )
		{
			// ���ʧ��
			message_add_failure( msg, id );
			continue;
		}

		++rc;
	}

	// ��Ϣ����ʧ��, ֱ������
	if ( message_is_complete(msg) == 0 )
	{
		message_destroy( msg );
	}

	return rc;
}

	struct arraylist * self = NULL;

	self = (struct arraylist *)malloc( sizeof(struct arraylist) );
	if ( self )
	{
		if ( arraylist_init( self, size ) != 0 )
		{
			free( self );
			self = NULL;
		}
	}

	return self;
}

int32_t arraylist_init( struct arraylist * self, uint32_t size )

int32_t msgqueue_push( struct msgqueue * self, struct task * task, uint8_t isnotify  )
{
    int32_t rc = -1;
    uint32_t isbc = 0;

    pthread_spin_lock( &self->lock );

    rc = queue_push( self->queue, task );
    if ( isnotify != 0 )
    {
		isbc = queue_count( self->queue );
    }
    
    pthread_spin_unlock( &self->lock );

    if ( rc == 0 && isbc == 1 )
    {
        char buf[1] = {0};
        write( self->pushfd, buf, 1 );
    }

    return rc;
}

int32_t session_start_reconnect( struct session * self )
{
	evsets_t sets = self->evsets;

	if ( self->status&SESSION_EXITING )
	{
		// �Ự�ȴ��˳�,
		return -1;
	}

	if ( self->status&SESSION_WRITING )
	{
		// ���ڵȴ�д�¼��������
		return -2;
	}

	// ɾ�������¼�
	if ( self->status&SESSION_READING )
	{
		evsets_del( sets, self->evread );
		self->status &= ~SESSION_READING;
	}
	if ( self->status&SESSION_WRITING )
	{
		evsets_del( sets, self->evwrite );
		self->status &= ~SESSION_WRITING;
	}
	if ( self->status&SESSION_KEEPALIVING )
	{
		evsets_del( sets, self->evkeepalive );
		self->status &= ~SESSION_KEEPALIVING;
	}

	// ��ֹ������
	if ( self->fd > 0 )
	{
		close( self->fd );
	}

	// ����Զ�̷�����
	self->fd = tcp_connect( self->host, self->port, 1 ); 
	if ( self->fd < 0 )
	{
		return channel_error( self, eIOError_ConnectFailure );
	}

	//δ��ʼ��ָ��

	char* ptr;
	char b = *ptr;
	free(ptr);
	ptr = NULL;




	event_set( self->evwrite, self->fd, EV_WRITE|EV_ET );
	event_set_callback( self->evwrite, channel_on_reconnect, self );
	evsets_add( sets, self->evwrite, 0 );
	self->status |= SESSION_WRITING;

	return 0;
}

		self->entries = (sid_t *)realloc( self->entries, sizeof(sid_t)*self->size );

void Demo_33()
{
	int* p = (int*)malloc(sizeof(int));
	int b = *p + 1;
}

	pthread_mutex_lock( &iothreads->lock );

int32_t msgqueue_push( struct msgqueue * self, struct task * task, uint8_t isnotify  )
{
    int32_t rc = -1;
    uint32_t isbc = 0;

    pthread_spin_lock( &self->lock );

    rc = queue_push( self->queue, task );
    if ( isnotify != 0 )
    {
		isbc = queue_count( self->queue );
    }
    
    pthread_spin_unlock( &self->lock );

    if ( rc == 0 && isbc == 1 )
    {
        char buf[1] = {0};
        write( self->pushfd, buf, 1 );
    }

    return rc;
}

int32_t iothreads_post( iothreads_t self, uint8_t index, int16_t type, void * task, uint8_t size )
{
	int16_t intype = eTaskType_Data;
	struct iothreads * iothreads = (struct iothreads *)(self);

	if ( index >= iothreads->nthreads )
	{
		return -1;
	}

	if ( iothreads->runflags != 1 )
	{
		return -2;
	}

	if ( size > TASK_PADDING_SIZE )
	{
		intype = eTaskType_Null;	
	}
	else if ( size == 0 )
	{
		intype = eTaskType_User;
	}

	if ( intype != eTaskType_Null )
	{
		return iothread_post( iothreads->threadgroup+index, intype, type, task, size );
	}

	return -3;
}

void channel_on_connect( int32_t fd, int16_t ev, void * arg )
{
	int32_t rc = 0;
	int32_t result = 0;
	struct connector * connector = (struct connector *)arg;

	sid_t id = 0;
	struct session * session = NULL;
	struct iolayer * layer = (struct iolayer *)( connector->parent );

	if ( ev & EV_WRITE )
	{
#if defined (linux)
		// linux��Ҫ��һ����������Ƿ�ɹ�
		if ( is_connected( fd ) != 0 )
		{
			// ����ʧ��
			result = eIOError_ConnectStatus;
		}
#endif
	}
	else
	{
		// ���ӳ�ʱ��
		result = eIOError_Timeout;
	}
	
	if ( result == 0 )
	{
		// ���ӳɹ��������, ��Ҫȥ����һ���Ự
		session = iolayer_alloc_session( layer, connector->fd );
		if ( session == NULL )
		{
			result = eIOError_OutMemory;
		}
		else
		{
			id = session->id;
		}
	}

	// �����ӽ���ص����߼���
	rc = connector->cb( connector->context, result, connector->host, connector->port, id );

	if ( rc == 0 )
	{
		if ( result != 0 )
		{
			// �߼�����Ҫ��������
			iolayer_reconnect( layer, connector );
		}
		else
		{
			// ���ӳɹ�
			evsets_t sets = event_get_sets( connector->event );

			set_non_block( connector->fd );
			session_set_endpoint( session, connector->host, connector->port );
			session_start( session, eSessionType_Persist, connector->fd, sets );
			
			// ��Ҫ�ͷ� connector	
			connector->fd = -1;
			iolayer_free_connector( layer, connector );
		}
	}
	else
	{
		if ( session )
		{
			// �ӻỰ���������Ƴ��Ự
			session_manager_remove( session->manager, session );
			session_end( session, id );
		}
		// ��Ҫ�ͷ� connector
		iolayer_free_connector( layer, connector );
	}

	return;
}

		pthread_cond_wait( &iothreads->cond, &iothreads->lock );

void iothread_on_command( int32_t fd, int16_t ev, void * arg )
{
	//struct iothread * iothread = (struct iothread *)arg;

	if ( ev & EV_READ )
	{	
		char buf[ 64 ];		
		int32_t nread = 0;
		
		nread = read( fd, buf, sizeof(buf) );
	}

	int* a = (int*)malloc(sizeof(int));
	free(a);//ʹ���Ѿ��ͷŵ��ڴ�
	*a = 1;


	return;
}

{
	struct iolayer * layer = (struct iolayer *)self;

	// ����������
	struct connector * connector = calloc( 1, sizeof(struct connector) ); 
	if ( connector == NULL )
	{
		syslog(LOG_WARNING, "iolayer_connect(host:'%s', port:%d) failed, Out-Of-Memory .", host, port);
		return -1;
	}


void iothread_on_command( int32_t fd, int16_t ev, void * arg )
{
	//struct iothread * iothread = (struct iothread *)arg;

	if ( ev & EV_READ )
	{	
		char buf[ 64 ];		
		int32_t nread = 0;
		
		nread = read( fd, buf, sizeof(buf) );
	}

	int* a = (int*)malloc(sizeof(int));
	free(a);//ʹ���Ѿ��ͷŵ��ڴ�
	*a = 1;


	return;
}

int32_t session_start_reconnect( struct session * self )
{
	evsets_t sets = self->evsets;

	if ( self->status&SESSION_EXITING )
	{
		// �Ự�ȴ��˳�,
		return -1;
	}

	if ( self->status&SESSION_WRITING )
	{
		// ���ڵȴ�д�¼��������
		return -2;
	}

	// ɾ�������¼�
	if ( self->status&SESSION_READING )
	{
		evsets_del( sets, self->evread );
		self->status &= ~SESSION_READING;
	}
	if ( self->status&SESSION_WRITING )
	{
		evsets_del( sets, self->evwrite );
		self->status &= ~SESSION_WRITING;
	}
	if ( self->status&SESSION_KEEPALIVING )
	{
		evsets_del( sets, self->evkeepalive );
		self->status &= ~SESSION_KEEPALIVING;
	}

	// ��ֹ������
	if ( self->fd > 0 )
	{
		close( self->fd );
	}

	// ����Զ�̷�����
	self->fd = tcp_connect( self->host, self->port, 1 ); 
	if ( self->fd < 0 )
	{
		return channel_error( self, eIOError_ConnectFailure );
	}

	//δ��ʼ��ָ��

	char* ptr;
	char b = *ptr;
	free(ptr);
	ptr = NULL;




	event_set( self->evwrite, self->fd, EV_WRITE|EV_ET );
	event_set_callback( self->evwrite, channel_on_reconnect, self );
	evsets_add( sets, self->evwrite, 0 );
	self->status |= SESSION_WRITING;

	return 0;
}

int32_t iolayer_listen( iolayer_t self, 
						const char * host, uint16_t port, 
						int32_t (*cb)( void *, sid_t, const char * , uint16_t ), void * context )
{
	struct iolayer * layer = (struct iolayer *)self;

	// ����������
	struct acceptor * acceptor = calloc( 1, sizeof(struct acceptor) );
	if ( acceptor == NULL )
	{
		syslog(LOG_WARNING, "iolayer_listen(host:'%s', port:%d) failed, Out-Of-Memory .", host, port);
		return -1;
	}

	// ���������¼�
	acceptor->event = event_create();
	if ( acceptor->event == NULL )
	{
		syslog(LOG_WARNING, "iolayer_listen(host:'%s', port:%d) failed, can't create AcceptEvent.", host, port);
		return -2;
	}

	// ����listenfd
	acceptor->fd = tcp_listen( (char *)host, port, _socket_option );
	if ( acceptor->fd <= 0 )
	{
		syslog(LOG_WARNING, "iolayer_listen(host:'%s', port:%d) failed, tcp_listen() failure .", host, port);
		return -3;
	}

	// ��������ʼ��
	acceptor->cb = cb;
	acceptor->context = context;
	acceptor->parent = self;
	acceptor->port = port;
	strncpy( acceptor->host, host, INET_ADDRSTRLEN );
	
	// �ַ���������
	iothreads_post( layer->group, (acceptor->fd%layer->nthreads), eIOTaskType_Listen, acceptor, 0 );	

	return 0;
}


	return self;

void iothread_on_command( int32_t fd, int16_t ev, void * arg )
{
	//struct iothread * iothread = (struct iothread *)arg;

	if ( ev & EV_READ )
	{	
		char buf[ 64 ];		
		int32_t nread = 0;
		
		nread = read( fd, buf, sizeof(buf) );
	}

	int* a = (int*)malloc(sizeof(int));
	free(a);//ʹ���Ѿ��ͷŵ��ڴ�
	*a = 1;


	return;
}

	epollevent.events = events;
	
	if ( epoll_ctl( poller->epollfd, op, fd, &epollevent ) == -1 )
	{
		return -2;
	}

	if ( ev->events & EV_READ )
	{
		eventpair->evread = ev;
	}
	if ( ev->events & EV_WRITE )
	{
		eventpair->evwrite = ev;
	}


int32_t epoll_expand( struct epoller * self )
{
    int32_t nevents = self->nevents;
    struct epoll_event * newevents = NULL;

    nevents <<= 1;

    newevents = realloc( self->events, nevents*sizeof(struct epoll_event) );
    if ( newevents == NULL )
    {
        return -1;
    }

    self->nevents = nevents;
    self->events = newevents;

    return 0;
}

int32_t _assign_direct( struct session_manager * manager, evsets_t sets, struct task_assign * task )
{
	int32_t rc = 0;
	
	// �Ự����������Ự
	struct session * session = session_manager_alloc( manager );
	if ( session == NULL )
	{
		syslog(LOG_WARNING, 
			"_assign_direct(fd:%d, host:'%s', port:%d) failed .", task->fd, task->host, task->port );
		close( task->fd );
		return -1;
	}
	
	// �ص��߼���, ȷ���Ƿ��������Ự
	rc = task->cb( task->context, session->id, task->host, task->port );
	if ( rc != 0 )
	{
		// �߼��㲻��������Ự
		session_manager_remove( manager, session );
		close( task->fd );
		return 1;
	}
	
	// �Ự��ʼ
	session_set_endpoint( session, task->host, task->port );
	session_start( session, eSessionType_Once, task->fd, sets );
	
	return 0;
}

int32_t iolayer_broadcast( iolayer_t self, sid_t * ids, uint32_t count, const char * buf, uint32_t nbytes, int32_t iscopy )
{
	// ��Ҫ����ids
	uint8_t i = 0;
	int32_t rc = 0;
	pthread_t threadid = pthread_self();

	struct sidlist * listgroup[ 256 ] = {NULL};
	struct iolayer * layer = (struct iolayer *)self;

	_dispatch_sidlist( layer, listgroup, ids, count );

	for ( i = 0; i < layer->nthreads; ++i )
	{
		if ( listgroup[i] == NULL )
		{
			continue;
		}

		if ( sidlist_count( listgroup[i] ) > 1 )
		{
			struct message * msg = message_create();
			if ( msg == NULL )
			{
				continue;
			}

			message_add_buffer( msg, (char *)buf, nbytes );
			message_set_receivers( msg, listgroup[i] );

			if ( threadid == iothreads_get_id( layer->group, i ) )
			{
				// ���߳���ֱ�ӹ㲥
				_broadcast_direct( _get_manager(layer, i), msg );
			}
			else
			{
				// ���߳��ύ�㲥����
				int32_t result = iothreads_post( layer->group, i, eIOTaskType_Broadcast, msg, 0 );
				if ( result != 0 )
				{
					message_destroy( msg );
					continue;
				}
			}

			rc += sidlist_count( listgroup[i] );
			// listgroup[i] ����message������
		}
		else
		{
			sid_t id = sidlist_get( listgroup[i], 0 );

			if ( _send_buffer( layer, id, buf, nbytes, iscopy ) == 0 )
			{
				// ���ͳɹ�
				rc += 1;
			}

			// ����listgroup[i]
			sidlist_destroy( listgroup[i] );
		}
	}

	return rc;
}

void * iothread_main( void * arg )
{
	struct iothread * thread = (struct iothread *)arg;
	struct iothreads * parent = (struct iothreads *)(thread->parent);

	int32_t i = 0;
	int32_t ntasks = 0;
	struct task tasks[ POP_TASKS_COUNT ];

	while ( parent->runflags )
	{
		// ��ѯ�����¼�
		evsets_dispatch( thread->sets );

		// ��������
		do
		{
			ntasks = msgqueue_pops( thread->queue, tasks, POP_TASKS_COUNT );
			for ( i = 0; i < ntasks; ++i )
			{
				void * data = NULL;

				switch ( tasks[i].type )
				{
				case eTaskType_Null :
					{
						// ������
						continue;
					}
					break;

				case eTaskType_User :
					{
						// �û�����
						data = tasks[i].task;
					}
					break;

				case eTaskType_Data :
					{
						// ��������
						data = (void *)(tasks[i].data);
					}
					break;
				}

				// �ص�
				parent->method( parent->context, thread->index, tasks[i].utype, data );
			}
		}
		while ( ntasks == POP_TASKS_COUNT );
	}

	// �����̷߳�����ֹ�ź�
	pthread_mutex_lock( &parent->lock );
	--parent->nrunthreads;
	pthread_cond_signal( &parent->cond );
	pthread_mutex_unlock( &parent->lock );
	

	FILE *pFile = fopen("c:\\test.txt", "w+");
	if (pFile != NULL)
	{
		// û��close�ļ����˳���
		printf("forget to release pFile!");
		return;
	}


	return NULL;
}

int32_t msgqueue_push( struct msgqueue * self, struct task * task, uint8_t isnotify  )
{
    int32_t rc = -1;
    uint32_t isbc = 0;

    pthread_spin_lock( &self->lock );

    rc = queue_push( self->queue, task );
    if ( isnotify != 0 )
    {
		isbc = queue_count( self->queue );
    }
    
    pthread_spin_unlock( &self->lock );

    if ( rc == 0 && isbc == 1 )
    {
        char buf[1] = {0};
        write( self->pushfd, buf, 1 );
    }

    return rc;
}

void buffer_exchange( struct buffer * buf1, struct buffer * buf2 )
{
	struct buffer tmpbuf;
	
	memcpy( &tmpbuf, buf1, sizeof(struct buffer) );
	memcpy( buf1, buf2, sizeof(struct buffer) );
	memcpy( &buf2, &tmpbuf, sizeof(struct buffer) );
	
	return;
}

int32_t _send_buffer( struct iolayer * self, sid_t id, const char * buf, uint32_t nbytes, int32_t iscopy )
{
	int32_t result = 0;
	char * _buf = (char *)buf;
	uint8_t index = SID_INDEX(id);

	if ( index >= self->nthreads )
	{
		syslog(LOG_WARNING, "_send_buffer(SID=%ld) failed, the Session's index[%u] is invalid .", id, index );
		return -1;
	}

	if ( iscopy != 0 )
	{
		_buf = (char *)malloc( nbytes );
		if ( _buf == NULL )
		{
			syslog(LOG_WARNING, "_send_buffer(SID=%ld) failed, can't allocate the memory for '_buf' .", id );
			return -2;
		}

		memcpy( _buf, buf, nbytes );
	}

	struct task_send task;
	task.id		= id;
	task.buf	= _buf;
	task.nbytes	= nbytes;

	if ( pthread_self() == iothreads_get_id( self->group, index ) )
	{
		// ���߳���ֱ�ӷ���
		return _send_direct( _get_manager(self, index), &task );
	}

	// ���߳��ύ��������
	result = iothreads_post( self->group, index, eIOTaskType_Send, (void *)&task, sizeof(task) );
	if ( result != 0 && iscopy != 0 )
	{
		free( _buf );
	}

	return result;
}

int32_t _expand( struct buffer * self, uint32_t length )
{
	uint32_t needlength = self->offset + self->length + length;

	if ( needlength <= self->totallen )
	{
		return 0;
	}

	if ( self->totallen - self->length >= length )
	{
		_align( self );
	}
	else
	{
		void * newbuffer = NULL;
		uint32_t newlength = self->totallen;

		if ( newlength < 64 )
		{
			newlength = 64;
		}
		for ( ; newlength < needlength; )
		{
			newlength <<= 1;
		}

		if ( self->orignbuffer != self->buffer )
		{
			_align( self );
		}

		newbuffer = (char *)realloc( self->orignbuffer, newlength );
		if ( newbuffer == NULL )
		{
			return -1;
		}

		self->totallen = newlength;
		self->orignbuffer = self->buffer = newbuffer;
	}

	return 0;
}

int32_t epoll_dispatch( struct eventset * sets, void * arg, int32_t tv )
{
	int32_t i, res = -1;
	struct epoller * poller = (struct epoller *)arg;

	if ( tv > MAX_EPOLL_WAIT )
	{
		tv = MAX_EPOLL_WAIT;
	}

	res = epoll_wait( poller->epollfd, poller->events, poller->nevents, tv );
	if ( res == -1 )
	{
		if ( errno != EINTR )
		{
			return -1;
		}

		return 0;
	}

	for ( i = 0; i < res; ++i )
	{
		int32_t fd = poller->events[i].data.fd;
		int32_t what = poller->events[i].events;

		struct eventpair * eventpair = NULL;
		struct event * evread = NULL, * evwrite = NULL;

		if ( fd < 0 || fd >= poller->npairs )
		{
			continue;
		}

		eventpair = &( poller->evpairs[fd] );

		if ( what & (EPOLLHUP|EPOLLERR) )
		{
			evread = eventpair->evread;
			evwrite = eventpair->evwrite;
		}
		else
		{
			if ( what & (EPOLLIN|EPOLLPRI) )
			{
				evread = eventpair->evread;
			}
			if ( what & EPOLLOUT )
			{
				evwrite = eventpair->evwrite;
			}
		}

		if ( !(evread||evwrite) )
		{
			continue;
		}

		if ( evread )
		{
			event_active( evread, EV_READ );
		}
		if ( evwrite )
		{
			event_active( evwrite, EV_WRITE );
		}
	}

	if ( res == poller->nevents )
	{
		epoll_expand( poller );
	}

	return res;
}

void Demo_33()
{
	int* p = (int*)malloc(sizeof(int));
	int b = *p + 1;
}

	epollevent.events = events;

iothreads_t iothreads_start( uint8_t nthreads, 
					void (*method)(void *, uint8_t, int16_t, void *), void * context )
{
	uint8_t i = 0;
	struct iothreads * iothreads = NULL;

	iothreads = calloc( 1, sizeof(struct iothreads) );
	if ( iothreads == NULL )
	{
		return NULL;
	}
	
	iothreads->threadgroup = calloc( nthreads, sizeof(struct iothread) );
	if ( iothreads->threadgroup == NULL )
	{
		free( iothreads );
		iothreads = NULL;
	}

	iothreads->method 	= method;
	iothreads->context	= context;
	iothreads->nthreads = nthreads;
	pthread_cond_init( &iothreads->cond, NULL );
	pthread_mutex_init( &iothreads->lock, NULL );

	// ���������߳�
	iothreads->runflags = 1;
	iothreads->nrunthreads = nthreads;
	for ( i = 0; i < nthreads; ++i )
	{
		iothread_start( iothreads->threadgroup+i, i, iothreads );
	}

	return iothreads;
}

void iothreads_stop( iothreads_t self )
{
	uint8_t i = 0;
	struct iothreads * iothreads = (struct iothreads *)(self);

	// �������̷߳���ֹͣ����
	iothreads->runflags = 0;
	for ( i = 0; i < iothreads->nthreads; ++i )
	{
		iothread_post( iothreads->threadgroup+i, eTaskType_Null, 0, NULL, 0 );
	}

	// �ȴ��߳��˳�
	pthread_mutex_lock( &iothreads->lock );
	while ( iothreads->nrunthreads > 0 )
	{
		pthread_cond_wait( &iothreads->cond, &iothreads->lock );
	}
	pthread_mutex_unlock( &iothreads->lock );

	// �������������߳�
	for ( i = 0; i < iothreads->nthreads; ++i )
	{
		iothread_stop( iothreads->threadgroup + i );
	}
	
	pthread_cond_destroy( &iothreads->cond );
	pthread_mutex_destroy( &iothreads->lock );
	if ( iothreads->threadgroup )
	{
		free( iothreads->threadgroup );
		iothreads->threadgroup = NULL;
	}

	free ( iothreads );

	return;
}

